# WhatsApp service Dockerfile (stub mode, FastAPI webhook)
FROM python:3.12-slim

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# System build deps for optional native builds (generally wheels exist, but keep toolchain)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl build-essential gcc \
  && rm -rf /var/lib/apt/lists/*

# Copy application code and shared logic reused from telegram_service
COPY wha_service/ ./wha_service/
COPY telegram_service/ ./telegram_service/
COPY myimdb_service/ ./myimdb_service/
COPY utils.py ./utils.py
COPY bot_utils.py ./bot_utils.py

# Move into service directory so uv finds pyproject.toml
WORKDIR /app/wha_service

# Install uv and prepare venv; resolve and sync dependencies
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && /root/.local/bin/uv --version
RUN /root/.local/bin/uv venv && /root/.local/bin/uv lock && /root/.local/bin/uv sync --frozen

# Ensure runtime uses the venv
ENV VIRTUAL_ENV=/app/wha_service/.venv
ENV PATH="/app/wha_service/.venv/bin:$PATH"

# Return to repo root so module import path "wha_service.app" resolves to /app/wha_service/app.py
WORKDIR /app

EXPOSE 8080

# Optional healthcheck (requires curl if enabled)
# HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
#   CMD curl -fsS http://localhost:8080/health || exit 1

CMD ["uvicorn", "wha_service.app:app", "--host", "0.0.0.0", "--port", "8080"]